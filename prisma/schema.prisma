// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  albumId     String
  albumName   String
  artistName  String
  rating      Float
  releaseYear String
  imageUrl    String
  comment     String?
  createdAt   DateTime @default(now())
}

model Follows {
  id String @id @default(uuid())

  followerId  String
  followingId String

  follower  User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) //Can only follow each other once
}

model Artist {
  id        String         @id
  name      String
  followers ArtistFollow[] @relation("ArtistToFollows")
  createdAt DateTime       @default(now())
}

model ArtistFollow {
  id String @id @default(uuid())

  user   User   @relation("UserToArtistFollows", fields: [userId], references: [id])
  userId String

  artist   Artist @relation("ArtistToFollows", fields: [artistId], references: [id])
  artistId String

  createdAt DateTime @default(now())

  @@unique([userId, artistId])
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  phone     String?  @unique
  password  String
  firstName String
  createdAt DateTime @default(now())
  image     String?

  reviews   Review[]
  followers Follows[] @relation("UserFollowers")
  following Follows[] @relation("UserFollowing")

  artistFollows ArtistFollow[] @relation("UserToArtistFollows")

  hostedSessions      ListeningSession[]   @relation("UserHostSessions")
  sessionParticipants SessionParticipant[] @relation("UserSessionParticipants")
}

model ListeningSession {
  id        String   @id @default(uuid())
  hostId    String
  isLive    Boolean  @default(true)
  createdAt DateTime @default(now())

  host         User                 @relation("UserHostSessions", fields: [hostId], references: [id])
  participants SessionParticipant[]
}

model SessionParticipant {
  id        String   @id @default(uuid())
  userId    String
  sessionId String
  joinedAt  DateTime @default(now())
  hasJoined Boolean @default(false)

  user    User             @relation("UserSessionParticipants", fields: [userId], references: [id])
  session ListeningSession @relation(fields: [sessionId], references: [id])
}
