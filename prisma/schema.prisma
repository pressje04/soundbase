generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  albumId     String
  albumName   String
  artistName  String
  rating      Float
  releaseYear String
  imageUrl    String
  comment     String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Follows {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Artist {
  id        String         @id
  name      String
  createdAt DateTime       @default(now())
  followers ArtistFollow[] @relation("ArtistToFollows")
}

model ArtistFollow {
  id        String   @id @default(uuid())
  userId    String
  artistId  String
  createdAt DateTime @default(now())
  artist    Artist   @relation("ArtistToFollows", fields: [artistId], references: [id])
  user      User     @relation("UserToArtistFollows", fields: [userId], references: [id])

  @@unique([userId, artistId])
}

model User {
  id                  String               @id @default(uuid())
  email               String?              @unique
  phone               String?              @unique
  password            String
  firstName           String
  createdAt           DateTime             @default(now())
  image               String?
  artistFollows       ArtistFollow[]       @relation("UserToArtistFollows")
  following           Follows[]            @relation("UserFollowing")
  followers           Follows[]            @relation("UserFollowers")
  likes               Like[]
  hostedSessions      ListeningSession[]   @relation("UserHostSessions")
  posts               Post[]
  reposts             Repost[]
  reviews             Review[]
  sessionParticipants SessionParticipant[] @relation("UserSessionParticipants")
}

model ListeningSession {
  id           String               @id @default(uuid())
  hostId       String
  isLive       Boolean              @default(true)
  createdAt    DateTime             @default(now())
  host         User                 @relation("UserHostSessions", fields: [hostId], references: [id])
  participants SessionParticipant[]
}

model SessionParticipant {
  id        String           @id @default(uuid())
  userId    String
  sessionId String
  joinedAt  DateTime         @default(now())
  hasJoined Boolean          @default(false)
  session   ListeningSession @relation(fields: [sessionId], references: [id])
  user      User             @relation("UserSessionParticipants", fields: [userId], references: [id])
}

model Post {
  id           String   @id @default(cuid())
  userId       String
  albumId      String
  albumName    String
  artistName   String
  imageUrl     String
  rating       Float?
  comment      String?
  parentId     String?
  isReview     Boolean  @default(false)
  createdAt    DateTime @default(now())
  trackRanking Json?
  views        Int      @default(0)
  likes        Like[]
  parent       Post?    @relation("PostReplies", fields: [parentId], references: [id])
  replies      Post[]   @relation("PostReplies")
  user         User     @relation(fields: [userId], references: [id])
  reposts      Repost[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Repost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}
